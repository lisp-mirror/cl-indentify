(in-package :cl-indentify)

; Primary count zero is the default so no need to include those.
(defparameter +common-lisp-templates+
  '((assert :count 2 :primary (nil (:style :list)))
    (block :count 1)
    (case :count 1 :secondary ((:count 0)))
    (catch :count 1)
    (ccase :count 1 :secondary ((:count 0)))
    (cond :count 0 :secondary ((:count 0)))
    (ctypecase :count 1 :secondary ((:count 0)))
    (defclass :count 2 :primary ((:style :list)) :secondary ((:style :list :sub ((:count 0))) (:count 0)))
    (defconstant :count 1)
    (defgeneric :count 2 :primary ((:style :list)))
    (define-compiler-macro :count 2 :primary ((:style :list)))
    (define-condition :count 2 :primary ((:style :list)) :secondary ((:style :list :sub ((:count 0))) (:count 0)))
    (define-method-combination :count 1)
    (define-modify-macro :count 2 :primary ((:style :list)))
    (define-setf-expander :count 2 :primary ((:style :list)))
    (define-symbol-macro :count 1)
    (defmacro :count 2 :primary ((:style :list)))
    (defmethod :count 2 :ignore (:before :after :around) :primary ((:style :list)))
    (defpackage :count 1)
    (defparameter :count 1)
    (defsetf :count 2) ; primary is actually 2-3
    (defstruct :count 1 :primary ((:count 0)))
    (deftype :count 2 :primary ((:style :list)))
    (defun :count 2 :primary ((:style :list)))
    (defvar :count 1)
    (destructuring-bind :count 2 :primary ((:style :list) nil))
    (do-all-symbols :count 1 :primary ((:count 0))) ; tag
    (do :count 2 :primary ((:style :list :sub ((:count 0))))) ; tag
    (do* :count 2 :primary ((:style :list :sub ((:count 0))))) ; tag
    (do-external-symbols :count 1 :primary ((:count 0))) ; tag
    (dolist :count 1 :primary ((:count 0))) ; tag
    (do-symbols :count 1 :primary ((:count 0))) ; tag
    (dotimes :count 1 :primary ((:count 0))) ; tag
    (ecase :count 1 :secondary ((:count 0)))
    (etypecase :count 1 :secondary ((:count 0)))
    (eval-when :count 1)
    (flet :count 1 :primary ((:style :list :sub ((:count 1)))))
    (handler-bind :count 1 :primary ((:style :list :sub ((:count 0)))))
    (handler-case :count 1 :secondary ((:count 1)))
    (if :count 1)
    (:import-from :count 1)
    (labels :count 1 :primary ((:style :list :sub ((:count 1)))))
    (lambda :count 1 :primary ((:style :list)))
    (let :count 1 :primary ((:style :list :sub ((:count 0)))))
    (let* :count 1 :primary ((:style :list :sub ((:count 0)))))
    (loop :count 0)
    (macrolet :count 1 :primary ((:style :list :sub ((:count 1)))))
    (multiple-value-bind :count 2 :primary ((:style :list) nil))
    (prog :count 1 :primary ((:style :list :sub ((:count 0))))) ; tag
    (prog* :count 1 :primary ((:style :list :sub ((:count 0))))) ; tag
    (progv :count 2)
    (quote :count 0 :secondary ((:style :quote)))
    (:shadowing-import-from :count 1)
    (tagbody :count 0) ; tag
    (typecase :count 1 :secondary ((:count 0)))
    (unless :count 1)
    (unwind-protect :count 1)
    (when :count 1)
    (with-accessors :count 2 :primary ((:style :list) nil))
    (with-compilation-unit :count 1 :primary ((:style :list)))
    (with-condition-restarts :count 2)
    (with-hash-table-iterator :count 1 :primary ((:count 0)))
    (with-input-from-string :count 1 :primary ((:count 0)))
    (with-open-file :count 1 :primary ((:count 0)))
    (with-open-stream :count 1 :primary ((:count 0)))
    (with-output-to-string :count 1 :primary ((:count 0)))
    (with-package-iterator :count 1 :primary ((:count 0)))
    (with-simple-restart :count 1 :primary ((:count 0)))
    (with-slots :count 2 :primary ((:style :list) nil))))

(defparameter +asdf-templates+
  '((asdf:defsystem :count 1)))

(defparameter +uiop-templates+
  '((uiop:while-collecting :count 1)
    (uiop:with-current-directory :count 1)
    (uiop:with-deprecation :count 1)
    (uiop:with-enough-pathname :count 1)
    (uiop:with-fatal-condition-handler :count 1)
    (uiop:with-input :count 1)
    (uiop:with-muffled-compiler-conditions :count 1)
    (uiop:with-muffled-conditions :count 1)
    (uiop:with-muffled-loader-conditions :count 1)
    (uiop:with-null-input :count 1)
    (uiop:with-null-output :count 1)
    (uiop:with-output :count 1)
    (uiop:with-safe-io-syntax :count 1)
    (uiop:with-saved-deferred-warnings :count 1)
    (uiop:with-staging-pathname :count 1)
    (uiop:with-temporary-file :count 1)
    (uiop:with-upgradability :count 1)))

(defparameter +alexandria-templates+
  '((alexandria:cswitch :count 1 :secondary ((:count 0)))
    (alexandria:destructuring-case :count 1 :secondary ((:count 0)))
    (alexandria:destructuring-ccase :count 1 :secondary ((:count 0)))
    (alexandria:destructuring-ecase :count 1 :secondary ((:count 0)))
    (alexandria:eswitch :count 1 :secondary ((:count 0)))
    (alexandria:if-let :count 1)
    (alexandria:named-lambda :count 2)
    (alexandria:once-only :count 1)
    (alexandria:switch :count 1 :secondary ((:count 0)))
    (alexandria:when-let :count 1)
    (alexandria:when-let* :count 1)
    (alexandria:with-gensyms :count 1)
    (alexandria:with-unique-names :count 1)))

