(in-package :cl-indentify)

(defparameter +default-indent-templates+
  '((assert :count 2)
    (asdf:defsystem :count 1)
    (block :count 0)
    (case :count 1 :secondary (:count 0))
    (ccase :count 1 :secondary (:count 0))
    (cond :count 0 :secondary (:count 0))
    (ctypecase :count 1 :secondary (:count 0))
    (decf :count 1)
    (defclass :count 2)
    (defconstant :count 1)
    (defgeneric :count 2)
    (define-compiler-macro :count 2)
    (define-condition :count 1)
    (define-method-combination :count 2)
    (define-modify-macro :count 2)
    (define-setf-expander :count 2)
    (define-symbol-macro :count 2)
    (defmacro :count 2)
    (defmethod :count 2 :ignore (:before :after :around))
    (defpackage :count 1)
    (:shadowing-import-from :count 1)
    (:import-from :count 1)
    (defparameter :count 1)
    (defsetf :count 2)
    (defstruct :count 1)
    (deftype :count 1)
    (defun :count 2)
    (defvar :count 1)
    (destructuring-bind :count 2)
    (do :count 2)
    (do* :count 2)
    (do-all-symbols :count 1)
    (do-external-symbols :count 1)
    (dolist :count 1)
    (do-symbols :count 1)
    (dotimes :count 1)
    (ecase :count 1 :secondary (:count 0))
    (etypecase :count 1 :secondary (:count 0))
    (eval-when :count 1)
    (flet :count 1)
    (handler-bind :count 0)
    (handler-case :count 1 :secondary (:count 1))
    (if :count 1)
    (incf :count 1)
    (labels :count 1)
    (lambda :count 1)
    (let :count 1)
    (let* :count 1)
    (let-values :count 1)
    (loop :count 0)
    (macrolet :count 1)
    (multiple-value-bind :count 2)
    (prog1 :count 1)
    (setf :count 1)
    (typecase :count 1 :secondary (:count 0))
    (unless :count 1)
    (unwind-protect :count 1)
    (when :count 1)
    (with-input-from-string :count 1)
    (with-open-file :count 1)
    (with-open-socket :count 1)
    (with-open-stream :count 1)
    (with-output-to-string :count 1)
    (with-slots :count 2)))


